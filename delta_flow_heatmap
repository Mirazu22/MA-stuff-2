import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches

def delta_flow_heatmap(F_base, F_treat,
                       E_base=None,
                       green_idx=None,
                       t_window=None,
                       norm='origin',          # 'origin', 'none', or callable
                       title=None,
                       threshold=0,            # |Δ| below this → 0
                       figsize=(10, 8),
                       cmap='coolwarm'):
    """
    Heat-map of Δ-flows (treatment − baseline) with subsidised targets marked.

    green_idx : list[int] | None
        Indices of subsidised occupations to highlight.
    """

    # -------- 1. aggregate ΔF over chosen window ---------------------------
    sli = slice(*t_window) if t_window else slice(None)
    delta = (F_treat[sli] - F_base[sli]).sum(axis=0)   # shape (n,n)

    # -------- 2. optional scaling -----------------------------------------
    if callable(norm):
        delta = norm(delta, E_base)
    elif norm == 'origin':
        if E_base is None:
            raise ValueError("E_base required for norm='origin'")
        emp = E_base[sli].mean(axis=0)
        emp[emp == 0] = 1
        delta = delta / emp[:, None]
    elif norm != 'none':
        raise ValueError("norm must be 'origin', 'none', or callable")

    # -------- 3. threshold tiny values ------------------------------------
    delta[np.abs(delta) < threshold] = 0

    # -------- 4. plot ------------------------------------------------------
    n = delta.shape[0]
    v = np.nanpercentile(np.abs(delta), 99) or 1
    fig, ax = plt.subplots(figsize=figsize)
    im = ax.imshow(delta, cmap=cmap, vmin=-v, vmax=v)

    ax.set_title(title or "Change in hiring flows (treatment − baseline)")
    ax.set_xticks(range(n)); ax.set_yticks(range(n))
    ax.set_xticklabels([]);  ax.set_yticklabels([])       # hide labels

    cbar = fig.colorbar(im, ax=ax, shrink=0.8)
    cbar.set_label("Δ hires (scaled)")

    # -------- 5. mark subsidised targets -----------------------------------
    if green_idx is not None:
        for g in green_idx:
            # column (destination)
            ax.add_patch(patches.Rectangle((g-0.5, -0.5),
                                           1, n, fill=False,
                                           edgecolor='black', linewidth=1.5))
            # row (origin)
            ax.add_patch(patches.Rectangle((-0.5, g-0.5),
                                           n, 1, fill=False,
                                           edgecolor='black', linewidth=1.5))

    plt.tight_layout()
    return fig, delta

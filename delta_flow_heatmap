import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as mtransforms

def delta_flow_heatmap(F_base, F_treat,
                       E_base=None,
                       green_idx=None,
                       t_window=None,
                       norm='origin',          # 'origin', 'flow', 'none', callable
                       title=None,
                       threshold=0,            # after scaling: |Δ|<thr → 0
                       figsize=(10, 8),
                       cmap='coolwarm',
                       eps=1e-9):              # protects against divide-by-0
    """
    Heat-map of hiring-flow changes with optional scaling.
    norm='flow'  → percentage change: (sum_treat - sum_base)/sum_base
    """

    # ---- 1. choose window & aggregate absolute flows ----------------------
    sli = slice(*t_window) if t_window else slice(None)
    sum_base  = F_base[sli].sum(axis=0)         # shape (n,n)
    sum_treat = F_treat[sli].sum(axis=0)
    delta_abs = sum_treat - sum_base

    # ---- 2. scaling -------------------------------------------------------
    if callable(norm):                          # custom function
        delta = norm(delta_abs, F_base, F_treat, E_base)
    elif norm == 'origin':
        if E_base is None:
            raise ValueError("E_base required for norm='origin'")
        emp = E_base[sli].mean(axis=0)
        emp[emp == 0] = 1
        delta = delta_abs / emp[:, None]
    elif norm == 'flow':
        denom = sum_base.copy()
        denom[np.abs(denom) < eps] = np.nan      # avoid 0÷0 or tiny numbers
        delta = delta_abs / denom               # percentage change
    elif norm == 'none':
        delta = delta_abs
    else:
        raise ValueError("norm must be 'origin', 'flow', 'none', or callable")

    # ---- 3. threshold tiny values & choose colour scale -------------------
    delta[np.abs(delta) < threshold] = 0
    vmax = np.nanpercentile(np.abs(delta), 99) or 1

    # ---- 4. plot ----------------------------------------------------------
    n = delta.shape[0]
    fig, ax = plt.subplots(figsize=figsize)
    im = ax.imshow(delta, cmap=cmap, vmin=-vmax, vmax=vmax)

    ax.set_title(title or "Δ hiring-flow (% change)" if norm=='flow'
                 else "Δ hiring-flow (scaled)")
    ax.set_xticks(range(n)); ax.set_yticks(range(n))
    ax.set_xticklabels([]);  ax.set_yticklabels([])

    cbar = fig.colorbar(im, ax=ax, shrink=0.8)
    cbar.set_label("% change" if norm=='flow' else "Δ hires (scaled)")

    # ---- 5. mark subsidised occupations -----------------------------------
    if green_idx is not None:
        for g in green_idx:


        pad_pts = 10                         # how far the triangles sit outside (points)
        
        # ▼  triangles below the x-axis  (destinations)
        trans_x = mtransforms.offset_copy(
                     ax.get_xaxis_transform(which='grid'),   # x = data, y = axes
                     fig=ax.figure, y=-pad_pts, units='points')
        ax.scatter(green_idx, np.zeros_like(green_idx),      # y=0 at the axis line
                   marker='v', s=marker_size,
                   facecolors='none', edgecolors='black', linewidths=1.2,
                   transform=trans_x, clip_on=False)
        
        # ▸  triangles left of the y-axis  (origins)
        trans_y = mtransforms.offset_copy(
                     ax.get_yaxis_transform(which='grid'),   # y = data, x = axes
                     fig=ax.figure, x=-pad_pts, units='points')
        ax.scatter(np.zeros_like(green_idx), green_idx,      # x=0 at the axis line
                   marker='>', s=marker_size,
                   facecolors='none', edgecolors='black', linewidths=1.2,
                   transform=trans_y, clip_on=False)

    plt.tight_layout()
    return fig, delta

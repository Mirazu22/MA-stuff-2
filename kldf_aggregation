import pandas as pd
import numpy as np
from typing import Dict, Tuple

__all__ = [
    "parent",
    "build_map",
    "aggregate_employment",
    "aggregate_matrix",
    "aggregate_kldb",
    "summarise_aggregation",
    "row_stochastic",
]

# ---------------------------------------------------------------------------
# 1. helpers
# ---------------------------------------------------------------------------

def parent(code: str | int, digits: int = 3) -> str:
    """Return the *prefix* of a KldB‑4 code (works with int or str)."""
    if digits not in (2, 3):
        raise ValueError("digits must be 2 or 3 for KldB aggregation")
    code_str = str(code)
    if len(code_str) < digits:
        raise ValueError(
            f"code '{code_str}' shorter than requested prefix length {digits}")
    return code_str[:digits]


def _to_str_index(obj: pd.Series | pd.DataFrame):
    """Return a *copy* with the index (and columns) coerced to *str*."""
    out = obj.copy()
    out.index = out.index.astype(str)
    if isinstance(out, pd.DataFrame):
        out.columns = out.columns.astype(str)
    return out

# ---------------------------------------------------------------------------
# 2. build the aggregation map
# ---------------------------------------------------------------------------

def build_map(empl: pd.Series, *, threshold: int) -> Dict[str, str]:
    """Map each 4‑digit code to its final bucket, **preserving** high‑employment codes.

    Logic
    -----
    1. Keep any 4‑digit code whose employment ≥ *threshold* as its **own** bucket.
    2. Collapse the remaining (low) codes to their 3‑digit parent.
    3. For those 3‑digit buckets whose *combined* employment is still below
       *threshold*, collapse **only those** further to 2‑digit.
    """
    empl_str = _to_str_index(empl)

    mapping: Dict[str, str] = {}
    low_codes: list[str] = []

    # Step 1 – decide which 4‑digit codes survive
    for code, emp in empl_str.items():
        code_s = str(code)
        if emp >= threshold:
            mapping[code_s] = code_s  # keep as 4‑digit
        else:
            p3 = parent(code_s, 3)
            mapping[code_s] = p3
            low_codes.append(code_s)

    if not low_codes:
        return mapping  # everyone met the threshold

    # Step 2 – evaluate the 3‑digit buckets built from low codes only
    low_series = empl_str[low_codes]
    bucket3 = pd.Series({c: mapping[c] for c in low_codes})
    tot3 = low_series.groupby(bucket3).sum()
    underfilled3 = tot3[tot3 < threshold].index

    if not underfilled3.empty:
        for code in low_codes:
            if mapping[code] in underfilled3:
                mapping[code] = parent(code, 2)

    return mapping

# ---------------------------------------------------------------------------
# 3. aggregation helpers
# ---------------------------------------------------------------------------

def aggregate_employment(empl: pd.Series, mapping: Dict[str, str]) -> pd.Series:
    """Aggregate an employment vector using *mapping* (int or str indices)."""
    empl_str = _to_str_index(empl)
    grouped = empl_str.groupby(empl_str.index.map(mapping)).sum()
    return grouped.sort_index()


def aggregate_matrix(trans: pd.DataFrame, mapping: Dict[str, str]) -> pd.DataFrame:
    """Aggregate both rows and columns of a transition count matrix."""
    trans_str = _to_str_index(trans)
    rows = trans_str.groupby(mapping, axis=0).sum()
    cols = rows.groupby(mapping, axis=1).sum()
    order = sorted(cols.index)
    return cols.loc[order, order]

# ---------------------------------------------------------------------------
# 4. summarisation helper
# ---------------------------------------------------------------------------

def summarise_aggregation(mapping: Dict[str, str], empl: pd.Series) -> pd.DataFrame:
    """DataFrame summarising the final buckets and their membership."""
    empl_str = _to_str_index(empl)
    df = pd.DataFrame({
        "origin": list(mapping.keys()),
        "agg": [mapping[k] for k in mapping.keys()],
    })
    df["empl"] = df["origin"].map(empl_str)
    summary = (
        df.groupby("agg")
          .agg(members=("origin", list), total_employment=("empl", "sum"))
          .assign(num_codes=lambda d: d["members"].str.len())
          .sort_index()
    )
    return summary

# ---------------------------------------------------------------------------
# 5. high‑level wrapper
# ---------------------------------------------------------------------------

def aggregate_kldb(
    trans: pd.DataFrame,
    empl: pd.Series,
    *,
    threshold: int = 5_000,
    warn_if_unresolved: bool = True,
) -> Tuple[pd.DataFrame, pd.Series, Dict[str, str], pd.DataFrame]:
    """Aggregate transition counts/employment vector + rich summary."""
    mapping = build_map(empl, threshold=threshold)
    empl_new = aggregate_employment(empl, mapping)
    trans_new = aggregate_matrix(trans, mapping)
    summary = summarise_aggregation(mapping, empl)

    if warn_if_unresolved and (empl_new < threshold).any():
        import warnings
        warnings.warn(
            "Some buckets remain below the threshold even after 2‑digit aggregation.",
            RuntimeWarning,
        )

    return trans_new, empl_new, mapping, summary

# ---------------------------------------------------------------------------
# 6. utilities
# ---------------------------------------------------------------------------

def row_stochastic(counts: pd.DataFrame) -> pd.DataFrame:
    """Row‑normalise a count matrix to probabilities (ignoring zero rows)."""
    totals = counts.sum(axis=1).replace(0, np.nan)
    return counts.div(totals, axis=0)

# ---------------------------------------------------------------------------
# 7. minimal self‑test
# ---------------------------------------------------------------------------

if __name__ == "__main__":
    # Toy data with int indices; code 1234 >= threshold will SURVIVE as 4‑digit
    idx_int = [1234, 1235, 1241, 2111, 2112, 3110]
    np.random.seed(1)
    toy_trans = pd.DataFrame(
        np.random.randint(0, 100, size=(len(idx_int), len(idx_int))),
        index=idx_int,
        columns=idx_int,
    )
    toy_empl = pd.Series([2500, 80, 60, 2100, 30, 15], index=idx_int)

    T, E, M, S = aggregate_kldb(toy_trans, toy_empl, threshold=500)
    print("Surviving 4‑digit codes:", [k for k, v in M.items() if k == v])
    print("\nAggregated employment:\n", E)
    print("\nSummary:\n", S)

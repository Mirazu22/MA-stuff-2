import numpy as np
import matplotlib.pyplot as plt
from matplotlib.sankey import Sankey


def green_worker_origin_sankey(green_idx, labels,
                               F_base, F_pol,
                               E_base, E_pol,
                               U_base, U_pol,
                               top_k=10, t_window=None,
                               figsize=(10, 6)):
    """
    Sankey (+ console stats) that splits each donor's ribbon into
    baseline hires (grey) and extra-due-to-subsidy (green).
    """

    # ---------- 1. Aggregate flows over chosen time window ------------------
    sl = slice(*t_window) if t_window is not None else slice(None)
    base_in  = F_base[sl, :, green_idx].sum(axis=(0, 2))
    pol_in   = F_pol[sl, :, green_idx].sum(axis=(0, 2))
    extra_in = np.maximum(pol_in - base_in, 0.0)            # clip negatives

    donors = extra_in.argsort()[::-1][:top_k]
    donors = donors[extra_in[donors] > 0]
    if donors.size == 0:
        raise ValueError("No positive extra inflow detected – subsidy too small?")

    baseline_flows = base_in[donors]
    extra_flows    = extra_in[donors]
    total_inflow   = baseline_flows.sum() + extra_flows.sum()

    # ---------- 2. Build flow & meta vectors --------------------------------
    flows        = np.hstack([-baseline_flows, -extra_flows, [total_inflow]])
    orientations = [1] * (2 * len(donors)) + [-1]            # right, right, left
    labels_flows = [f"{labels[d]} (base)" for d in donors] + \
                   [f"{labels[d]} (Δ)"   for d in donors] + \
                   ["Green jobs (total)"]
    colours      = (["#888888"] * len(donors)) + \
                   (["#2ca02c"] * len(donors)) + \
                   ["#b0e0b0"]                     # sink

    # ---------- 3. Draw Sankey and then recolour ----------------------------
    fig = plt.figure(figsize=figsize)
    ax  = fig.add_subplot(1, 1, 1)

    sankey = Sankey(ax=ax, gap=0.5, unit='')
    sankey.add(flows=flows,
               orientations=orientations,
               labels=labels_flows,
               facecolor="#cccccc")                 # temp colour
    diagrams = sankey.finish()                     # returns a list

    # recolour each patch
    for patch, clr in zip(diagrams[0].patches, colours):
        patch.set_facecolor(clr)

    ax.set_title("Where do additional green-job hires come from?")
    plt.tight_layout()

    # ---------- 4. Console stats --------------------------------------------
    print(f"\nTop-{len(donors)} donor occupations:")
    print("{:<35s} {:>11s} {:>11s} {:>11s}".format(
          "Occupation", "base→green", "Δ hires", "Δ emp"))
    donor_table = []
    for d, b, e in zip(donors, baseline_flows, extra_flows):
        emp_delta = E_pol[-1, d] - E_base[-1, d]
        ur_base   = U_base[:, d] / (U_base[:, d] + E_base[:, d])
        ur_pol    = U_pol[:, d]  / (U_pol[:, d]  + E_pol[:, d])
        ur_delta  = ur_pol.mean() - ur_base.mean()

        print("{:<35s} {:>11.0f} {:>11.0f} {:>11.0f}  (Δ u-rate = {:+.2%})"
              .format(labels[d], b, e, emp_delta, ur_delta))

        donor_table.append(dict(id=int(d),
                                label=labels[d],
                                base_hires=float(b),
                                extra_hires=float(e),
                                emp_delta=float(emp_delta),
                                u_rate_delta=float(ur_delta)))

    return fig, donor_table

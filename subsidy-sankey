import numpy as np
import plotly.graph_objects as go

def green_worker_origin_sankey_plotly(green_idx, labels,
                                      F_base, F_pol,
                                      E_base, E_pol,
                                      U_base, U_pol,
                                      top_k=10, t_window=None):
    """
    Sankey + donor stats   —   *cross-occupation inflow only*
      • removes all self-loops (i == j)
      • ignores origins that are subsidised themselves
    """

    # ------------------------------------------------------------------ #
    # 0.  Drop self-loops *once*, right after your simulator returns F
    # ------------------------------------------------------------------ #
    diag = np.arange(F_base.shape[1])
    F_base = F_base.copy();  F_base[:, diag, diag] = 0.0
    F_pol  = F_pol.copy();   F_pol[:,  diag, diag] = 0.0

    # ------------------------------------------------------------------ #
    # 1.  Aggregate flows over time window
    # ------------------------------------------------------------------ #
    sl = slice(*t_window) if t_window else slice(None)
    base_in  = F_base[sl, :, green_idx].sum(axis=(0, 2))
    pol_in   = F_pol[sl, :, green_idx].sum(axis=(0, 2))
    extra_in = np.maximum(pol_in - base_in, 0.0)          # clip negatives

    # ------------------------------------------------------------------ #
    # 2.  Keep only donors NOT in green_idx and with positive extra flow
    # ------------------------------------------------------------------ #
    is_green = np.zeros(extra_in.size, dtype=bool)
    is_green[green_idx] = True
    donor_mask = (~is_green) & (extra_in > 0)

    donors = extra_in[donor_mask].argsort()[::-1][:top_k]
    donors = np.where(donor_mask)[0][donors]
    if donors.size == 0:
        raise ValueError("No positive cross-occupation inflow detected.")

    base_flows  = base_in[donors]
    extra_flows = extra_in[donors]

    # ------------------------------------------------------------------ #
    # 3.  Build node & link lists for Plotly Sankey
    # ------------------------------------------------------------------ #
    node_labels, node_colors, donor_id_map = [], [], {}
    for idx, d in enumerate(donors):
        donor_id_map[d] = idx * 2
        node_labels += [f"{labels[d]} (base)",
                        f"{labels[d]} (Δ)"]
        node_colors += ["#888888", "#2ca02c"]          # grey / green

    sink_id = len(node_labels)
    node_labels.append("Green jobs (total)")
    node_colors.append("#b0e0b0")                     # pale green

    sources, targets, values, colors = [], [], [], []
    for d, b, e in zip(donors, base_flows, extra_flows):
        src_base  = donor_id_map[d]
        src_extra = src_base + 1
        sources += [src_base,  src_extra]
        targets += [sink_id,   sink_id]
        values  += [b,         e]
        colors  += ["#888888", "#2ca02c"]

    fig = go.Figure(go.Sankey(
        node=dict(label=node_labels, pad=15, thickness=15, color=node_colors),
        link=dict(source=sources, target=targets, value=values,
                  color=colors,
                  hovertemplate="%{value:,.0f}<extra></extra>")
    ))
    fig.update_layout(title="Cross-occupation inflow into subsidised green jobs",
                      font=dict(size=12))

    # ------------------------------------------------------------------ #
    # 4.  Console stats for donors
    # ------------------------------------------------------------------ #
    print(f"\nTop-{len(donors)} cross-occupation donors")
    print("{:<35s} {:>11s} {:>11s} {:>11s}".format(
          "Occupation", "base→green", "Δ hires", "Δ emp"))
    donor_table = []
    for d, b, e in zip(donors, base_flows, extra_flows):
        emp_delta = E_pol[-1, d] - E_base[-1, d]
        ur_base   = U_base[:, d] / (U_base[:, d] + E_base[:, d])
        ur_pol    = U_pol[:, d]  / (U_pol[:, d]  + E_pol[:, d])
        ur_delta  = ur_pol.mean() - ur_base.mean()

        print("{:<35s} {:>11.0f} {:>11.0f} {:>11.0f}  (Δ u-rate = {:+.2%})"
              .format(labels[d], b, e, emp_delta, ur_delta))

        donor_table.append(dict(id=int(d),
                                label=labels[d],
                                base_hires=float(b),
                                extra_hires=float(e),
                                emp_delta=float(emp_delta),
                                u_rate_delta=float(ur_delta)))

    return fig, donor_table

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.sankey import Sankey

def green_worker_origin_sankey(green_idx, labels,
                               F_base, F_pol,
                               E_base, E_pol,
                               U_base, U_pol,
                               top_k=10, t_window=None,
                               figsize=(10, 6)):
    """
    Visualises where the *additional* hires into subsidised ‘green’ occupations
    come from and prints the main donor-occupation metrics.

    Parameters
    ----------
    green_idx : list[int]
        Indices of the subsidised (destination) occupations.
    labels : list[str]
        len = n_occ.  Human-readable occupation names.
    F_base, F_pol : ndarray (T, n, n)
        Flow matrices from baseline and policy runs.   F[t,i,j] = hires j←i.
    E_base, E_pol, U_base, U_pol : ndarray (T, n)
        Employment & unemployment time-series (needed for donor stats).
    top_k : int
        Show this many largest donor occupations.
    t_window : tuple(int,int) | None
        Aggregate flows over [start, end) if given; otherwise use full horizon.
    figsize : tuple
        Matplotlib figure size.

    Returns
    -------
    fig : Figure
    donor_table : list[dict]   # one dict per donor with computed deltas
    """

    # -------- 1. Restrict to time window & aggregate -------------------------
    if t_window is None:
        slice_t = slice(None)              # all steps
    else:
        slice_t = slice(*t_window)

    base_in  = F_base[slice_t,:,green_idx].sum(axis=(0,2))   # origin-wise
    pol_in   = F_pol[slice_t,:,green_idx].sum(axis=(0,2))
    extra_in = pol_in - base_in                               # Δ hires

    # Guard: ignore negative or zero extras
    extra_in[extra_in < 0] = 0.0

    # -------- 2. Pick top-K donor occupations -------------------------------
    donors = extra_in.argsort()[::-1][:top_k]
    donors = donors[extra_in[donors] > 0]                     # drop zeros
    if donors.size == 0:
        raise ValueError("No positive extra inflow detected – subsidy too small?")

    # -------- 3. Prepare Sankey flow vectors --------------------------------
    baseline_flows = base_in[donors]
    extra_flows    = extra_in[donors]

    # colours: grey = baseline, green = extra
    colours = []
    for b, e in zip(baseline_flows, extra_flows):
        colours.extend(["#888888", "#2ca02c"])   # two ribbons per donor

    flows = np.hstack([ -baseline_flows,          # out of donor
                        -extra_flows,             # out of donor (extra)
                        baseline_flows + extra_flows ])  # balancing inflow

    labels_flows = [f"{labels[d]} (base)" for d in donors] + \
                   [f"{labels[d]} (Δ)"   for d in donors] + \
                   ["Green jobs (total)"]

    # Orientations: send everything to the right except the balancing inflow
    orientations = [1]* (2*len(donors)) + [-1]

    # -------- 4. Build the Sankey diagram -----------------------------------
    fig = plt.figure(figsize=figsize)
    ax  = fig.add_subplot(1,1,1)
    sankey = Sankey(ax=ax, unit='', gap=0.5)
    sankey.add(flows=flows,
               labels=labels_flows,
               orientations=orientations,
               facecolor=colours)
    sankey.finish()
    ax.set_title("Where do additional green-job hires come from?")

    # -------- 5. Print donor stats ------------------------------------------
    donor_table = []
    print("\nTop-{} donor occupations:".format(len(donors)))
    print("{:<35s} {:>11s} {:>11s} {:>11s}".format(
          "Occupation", "base→green", "Δ hires", "Δ emp"))
    for d, b, e in zip(donors, baseline_flows, extra_flows):
        # employment delta (end-of-sim)
        emp_delta = E_pol[-1,d] - E_base[-1,d]

        # unemployment-rate delta (mean over sim)
        ur_base = U_base[:,d] / (U_base[:,d] + E_base[:,d])
        ur_pol  = U_pol[:,d]  / (U_pol[:,d]  + E_pol[:,d])
        ur_delta = ur_pol.mean() - ur_base.mean()

        print("{:<35s} {:>11.0f} {:>11.0f} {:>11.0f}  (Δ u-rate = {:+.2%})"
              .format(labels[d], b, e, emp_delta, ur_delta))

        donor_table.append(dict(id=int(d),
                                label=labels[d],
                                base_hires=float(b),
                                extra_hires=float(e),
                                emp_delta=float(emp_delta),
                                u_rate_delta=float(ur_delta)))

    plt.tight_layout()
    return fig, donor_table
